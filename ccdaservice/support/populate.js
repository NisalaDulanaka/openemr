/* Template javascript objects for generating cda.
 * "identifier" and "extension" are the "sha_extension" and "extension" part of patient data
 * and are unique identifiers for that data generated by openemr ccm
 * but mostly not needed as many are embeded in template schema libraries
 * For missing fields or don't know, use "UNK" or "NI" for codes
 * I call the populate function with pd = the last element possible  to avoid unnecessary typing.
 * So take problems, the ccm ccda arrays is ccda.data.problem_lists.problem.various items which means 
 * populate function var pd = ccda.data.problem_lists.problem.
 * Looking at sample-data.json will give the gist. That giant object is the aml string intercepted on it's way to mirth server
 * and represents all possible data items from oemr as of today. fDate is important for parsing dates to generator.
 * I will populate ccm's guardian once I get my git up for this project. 
 * */

function fDate(str){
	/* Format dates to js required yyyy-mm-dd + zero hundred hours
	 * Yes I freely admit, I'm lazy!
	 *  */
	str = String(str); // at least ensure string, so cast it...
	if( Number(str) === 0) return "0000-01-01T00:00:00.000Z";
	if( str.length === 8 || (str.length === 14  && (1*str.substring(12, 14) ) === 0) ){ 
		// case yyyymmdd or yyyymmdd000000 called effectivetime by ccm.
		return [str.slice(0, 4), str.slice(4,6), str.slice(6,8)].join('-')+'T00:00:00.000Z';	
	}
	else if( str.length === 10 && (1*str.substring(0, 2) ) <= 12){ 
		// case mm/dd/yyyy or mm-dd-yyyy
		return [str.slice(6, 10), str.slice(0,2), str.slice(3,5) ].join('-')+'T00:00:00.000Z';
	}
	else if( str.length === 14 && (1*str.substring(12, 14) ) > 0){
		// maybe a real time so parse
	}
	return str+'T00:00:00.000Z'; // lets hope only needs time-could test more but, I'm a busy man..
}

function isOne(who) {
	// Javascript has a hard time deciding if prototype or property
	if (who !== null && typeof who === 'object') {
		return who.hasOwnProperty('extension') ? 1 : Object.keys(who).length;
	}
	return 0;
}

function populateDemographic(pd, g) {//g = guardian array and pd is patient demographic data
	return {
		"name" : {
			"middle" : [ pd.mname ],
			"last" : pd.lname,
			"first" : pd.fname
		},
		"dob" : {
			"point" : {
				"date" : fDate(pd.dob),
				"precision" : "day"
			}
		},
		"gender" : pd.gender,
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.19.5.99999.2",
			"extension" : "998991"
		}, {
			"identifier" : "2.16.840.1.113883.4.1",
			"extension" : pd.ssn
		} ],
		"marital_status" : pd.status,
		"addresses" : [ {
			"street_lines" : [ pd.street ],
			"city" : pd.city,
			"state" : pd.state,
			"zip" : pd.postalCode,
			"country" : pd.country,
			"use" : "primary home"
		} ],
		"phone" : [ {
			"number" : pd.phone_home,
			"type" : "primary home"
		} ],
		"race" : "White",
		"ethnicity" : pd.ethnicity,
		"languages" : [ {
			"language" : pd.language,
			"preferred" : true,
			"mode" : "Expressed spoken",
			"proficiency" : "Good"
		} ],
		"religion" : pd.religion,
		"birthplace" : {
			"city" : "Beaverton",
			"state" : "OR",
			"zip" : "97867",
			"country" : "US"
		},
		"guardians" : [ {
			"relation" : "Parent",
			"addresses" : [ {
				"street_lines" : [ "1357 Amber Drive" ],
				"city" : "Beaverton",
				"state" : "OR",
				"zip" : "97867",
				"country" : "US",
				"use" : "primary home"
			} ],
			"names" : [ {
				"last" : "Jones",
				"first" : "Ralph"
			} ],
			"phone" : [ {
				"number" : "(816)276-6909",
				"type" : "primary home"
			} ]
		} ]
	};
}

function populateMedication(pd) {
	return {
		"date_time" : {
			"low" : {
				"date" : fDate(pd.start_date),
				"precision" : "day"
			},
			"high" : {
				"date" : fDate(pd.end_date),
				"precision" : "day"
			}
		},
		"identifiers" : [ {
			"identifier" : "cdbd33f0-6cde-11db-9fe1-0800200c9a66"
		} ],
		"status" : pd.status,
		"sig" : pd.direction,
		"product" : {
			"identifiers" : [ {
				"identifier" : "2a620155-9d11-439e-92b3-5d9815ff4ee8"
			} ],
			"unencoded_name" : pd.drug,
			"product" : {
				"name" : pd.drug,
				"code" : pd.rxnorm,
				"translations" : [ {
					"name" : pd.drug,
					"code" : pd.rxnorm,
					"code_system_name" : "RXNORM"
				} ],
				"code_system_name" : "RXNORM"
			},
			"manufacturer" : "UNK"
		},
		"supply" : {
			"date_time" : {
				"low" : {
					"date" : fDate(pd.start_date),
					"precision" : "day"
				}
			},
			"repeatNumber" : "NI",
			"quantity" : "NI",
			"author" : {
				"identifiers" : [ {
					"identifier" : "2a620155-9d11-439e-92b3-5d9815fe4de8"
				} ],
				"name" : {
					"prefix" : pd.title,
					"last" : pd.lname,
					"first" : pd.fname
				}
			}
		},
		"administration" : {
			"route" : {
				"name" : pd.route,
				"code" : pd.route_code,
				"code_system_name" : "Medication Route FDA"
			},
			"form" : {
				"name" : pd.form,
				"code" : pd.form_code,
				"code_system_name" : "Medication Route FDA"
			},
			"dose" : {
				"value" : parseFloat(pd.dosage),
				"unit" : pd.unit
			},
			"rate" : {
				"value" : 90,
				"unit" : "ml/min"
			},
			"interval" : {
				"period" : {
					"value" : parseFloat(pd.dosage),
					"unit" : pd.interval
				},
				"frequency" : true
			}
		},
		"performer" : {
			"organization" : [ {
				"identifiers" : [ {
					"identifier" : "2.16.840.1.113883.19.5.9999.1393"
				} ],
				"name" : [ pd.performer_name ]
			} ]
		},
		"drug_vehicle" : {
			"name" : pd.form,
			"code" : pd.form_code,
			"code_system_name" : "RXNORM"
		},
		"precondition" : {
			"code" : {
				"code" : "ASSERTION",
				"code_system_name" : "ActCode"
			},
			"value" : {
				"name" : "",
				"code" : "NI",
				"code_system_name" : "SNOMED CT"
			}
		},
		"indication" : {
			"identifiers" : [ {
				"identifier" : "db734647-fc99-424c-a864-7e3cda82e703",
				"extension" : "45665"
			} ],
			"code" : {
				"name" : "Finding",
				"code" : "404684003",
				"code_system_name" : "SNOMED CT"
			},
			"date_time" : {
				"low" : {
					"date" : fDate(pd.start_date),
					"precision" : "day"
				}
			},
			"value" : {
				"name" : pd.indications,
				"code" : "NI",
				"code_system_name" : "SNOMED CT"
			}
		},
		"dispense" : {
			"identifiers" : [ {
				"identifier" : "1.2.3.4.56789.1",
				"extension" : "cb734647-fc99-424c-a864-7e3cda82e704"
			} ],
			"performer" : {
				"identifiers" : [ {
					"identifier" : "2.16.840.1.113883.19.5.9999.456",
					"extension" : "2981823"
				} ],
				"address" : [ {
					"street_lines" : [ pd.address ],
					"city" : pd.city,
					"state" : pd.state,
					"zip" : pd.zip,
					"country" : "US"
				} ],
				"organization" : [ {
					"identifiers" : [ {
						"identifier" : "2.16.840.1.113883.19.5.9999.1393"
					} ],
					"name" : [ pd.performer_name ]
				} ]
			}
		}
	};
}

function populateEncounter(pd) {
	return {
		"encounter" : {
			"name" : pd.encounter_procedures.procedures.text,
			"code" : pd.encounter_procedures.procedures.code,
			"code_system_name" : "CPT",
			"translations" : [ {
				"name" : "NI",
				"code" : "NI",
				"code_system_name" : "NI"
			} ]
		},
		"identifiers" : [ {
			"identifier" : pd.sha_extension
		} ],
		"date_time" : {
			"point" : {
				"date" : fDate(pd.date_formatted),
				"precision" : "second"
			}
		},
		"performers" : [ {
			"identifiers" : [ {
				"identifier" : pd.facility_sha_extension
			} ],
			"code" : [ {
				"name" : pd.physician_type,
				"code" : "NI",
				"code_system_name" : "SNOMED CT"
			} ]
		} ],
		"locations" : [ {
			"name" : pd.location,
			"location_type" : {
				"name" : pd.location_details,
				"code" : "NI",
				"code_system_name" : "HealthcareServiceLocation"
			},
			"address" : [ {
				"street_lines" : [ pd.facility_address ],
				"city" : pd.facility_city,
				"state" : pd.facility_state,
				"zip" : pd.facility_zip,
				"country" : pd.facility_country
			} ]
		} ],
		"findings" : [ {
			"identifiers" : [ {
				"identifier" : "",
				"extension" : ""
			} ],
			"value" : {
				"name" : pd.encounter_reason,
				"code" : "NI",
				"code_system_name" : "SNOMED CT"
			},
			"date_time" : {
				"low" : {
					"date" : fDate(pd.date_formatted),
					"precision" : "day"
				}
			}
		} ]
	};
}

function populateAllergy(pd) {
	return {
		"identifiers" : [ {
			"identifier" : "36e3e930-7b14-11db-9fe1-0800200c9a66"
		} ],
		"date_time" : {
			"point" : {
				"date" : fDate(pd.startdate),
				"precision" : "day"
			}
		},
		"observation" : {
			"identifiers" : [ {
				"identifier" : "4adc1020-7b14-11db-9fe1-0800200c9a66"
			} ],
			"allergen" : {
				"name" : pd.title,
				"code" : pd.rxnorm_code,
				"code_system_name" : "RXNORM"
			},
			"intolerance" : {
				"name" : "Propensity to adverse reactions to drug",
				"code" : pd.snomed_code,
				"code_system_name" : "SNOMED CT"
			},
			"date_time" : {
				"low" : {
					"date" : fDate(pd.startdate),
					"precision" : "day"
				}
			},
			"status" : {
				"name" : pd.allergy_status,
				"code" : pd.status_code,
				"code_system_name" : "SNOMED CT"
			},
			"reactions" : [ {
				"identifiers" : [ {
					"identifier" : "4adc1020-7b14-11db-9fe1-0800200c9a64"
				} ],
				"date_time" : {
					"low" : {
						"date" : fDate(pd.startdate),
						"precision" : "day"
					},
					"high" : {
						"date" : fDate(pd.enddate),
						"precision" : "day"
					}
				},
				"reaction" : {
					"name" : pd.reaction_text,
					"code" : pd.reaction_code,
					"code_system_name" : "SNOMED CT"
				},
				"severity" : {
					"code" : {
						"name" : pd.outcome,
						"code" : pd.outcome_code,
						"code_system_name" : "SNOMED CT"
					},
					"interpretation" : {
						"name" : "UNK",
						"code" : "NI",
						"code_system_name" : "Observation Interpretation"
					}
				}
			} ],
			"severity" : {
				"code" : {
					"name" : pd.outcome,
					"code" : pd.outcome_code,
					"code_system_name" : "SNOMED CT"
				},
				"interpretation" : {
					"name" : "UNK",
					"code" : "NI",
					"code_system_name" : "Observation Interpretation"
				}
			}
		}
	};
}

function populateProblem(pd) {
	return {
		"date_time" : {
			"low" : {
				"date" : fDate(pd.start_date_table),
				"precision" : "day"
			},
			"high" : {
				"date" : fDate(pd.end_date),
				"precision" : "day"
			}
		},
		"identifiers" : [ {
			"identifier" : pd.sha_extension
		} ],
		"problem" : {
			"code" : {
				"name" : pd.title,
				"code" : pd.code,
				"code_system_name" : "ICD10"
			},
			"date_time" : {
				"low" : {
					"date" : fDate(pd.start_date_table),
					"precision" : "day"
				},
				"high" : {
					"date" : fDate(pd.end_date),
					"precision" : "second"
				}
			}
		},
		"onset_age" : pd.age,
		"onset_age_unit" : "Year",
		"status" : {
			"name" : pd.status_table,
			"date_time" : {
				"low" : {
					"date" : fDate(pd.start_date_table),
					"precision" : "day"
				},
				"high" : {
					"date" : fDate(pd.end_date),
					"precision" : "second"
				}
			}
		},
		"patient_status" : pd.observation,
		"source_list_identifiers" : [ {
			"identifier" : "ec8a6ff8-ed4b-4f7e-82c3-e98e58b45de7"
		} ]
	};

}

function populateProcedure(pd) {
	return {
		"procedure" : {
			"name" : pd.description,
			"code" : pd.code,
			"code_system_name" : "CPT"
		},
		"identifiers" : [ {
			"identifier" : "d68b7e32-7810-4f5b-9cc2-acd54b0fd85d"
		} ],
		"status" : "",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.date),
				"precision" : "day"
			}
		},
		"body_sites" : [ {
			"name" : "",
			"code" : "",
			"code_system_name" : ""
		} ],
		"specimen" : {
			"identifiers" : [ {
				"identifier" : "c2ee9ee9-ae31-4628-a919-fec1cbb58683"
			} ],
			"code" : {
				"name" : "",
				"code" : "",
				"code_system_name" : "SNOMED CT"
			}
		},
		"performers" : [ {
			"identifiers" : [ {
				"identifier" : "2.16.840.1.113883.19.5.9999.456",
				"extension" : "2981823"
			} ],
			"address" : [ {
				"street_lines" : [ pd.address ],
				"city" : pd.city,
				"state" : pd.state,
				"zip" : pd.zip,
				"country" : "NI"
			} ],
			"phone" : [ {
				"number" : pd.work_phone,
				"type" : "work place"
			} ],
			"organization" : [ {
				"identifiers" : [ {
					"identifier" : "2.16.840.1.113883.19.5.9999.1393"
				} ],
				"name" : [ pd.facility_name ],
				"address" : [ {
					"street_lines" : [ pd.facility_address ],
					"city" : pd.facility_city,
					"state" : pd.facility_state,
					"zip" : pd.facility_zip,
					"country" : pd.facility_country
				} ],
				"phone" : [ {
					"number" : pd.facility_phone,
					"type" : "work place"
				} ]
			} ]
		} ],
		"procedure_type" : "procedure"
	};
}

function populateResult(pd) {
	return {
		"identifiers" : [ {
			"identifier" : "107c2dc0-67a5-11db-bd13-0800200c9a66"
		} ],
		"result" : {
			"name" : pd.title,
			"code" : pd.test_code || "NI",
			"code_system_name" : "LOINC"
		},
		"date_time" : {
			"point" : {
				"date" : fDate(pd.date_ordered_table),
				"precision" : "day"
			}
		},
		"status" : pd.order_status,
		"reference_range" : {
			"low": pd.subtest.range,
            "high": pd.subtest.range,
            "unit": pd.subtest.unit
		},
		"interpretations" : [ pd.subtest.result_value ],
		"value" : parseFloat(pd.subtest.result_value),
		"unit" : pd.subtest.unit
	};
}

function getResultSet(results) {
	var resultSet = {
		"identifiers" : [ {
			"identifier" : "7d5a02b0-67a4-11db-bd13-0800200c9a66"
		} ],
		"result_set" : {
			"name" : "Get this data.",
			"code" : "NI",
			"code_system_name" : "SNOMED CT"
		}
	};
	var rs = [];
	var many = [];
	var theone = {};
	many.results = [];
	var count = isOne(results.result);
	if (count > 1) {
		for ( var i in results.result) {
			theone[i] = populateResult(results.result[i]);
			many.results.push(theone[i]);
		}
	} else if (count !== 0) {
		theone = populateResult(results.result);
		many.results.push(theone);
	}
	rs.results = Object.assign(resultSet);
	rs.results.results = Object.assign(many.results);
	return rs;
}

function getPlanOfCare(pd) {
	return {
		"plan" : {
			"name" : pd.code_text,
			"code" : pd.code,
			"code_system_name" : "SNOMED CT"
		},
		"identifiers" : [ {
			"identifier" : "9a6d1bac-17d3-4195-89a4-1121bc809b4a"
		} ],
		"date_time" : {
			"center" : {
				"date" : fDate(pd.date),
				"precision" : "day"
			}
		},
		"type" : "observation",
		"status" : {
			"code" : pd.status
		},
		"subType" : pd.description
	};
}

function populateVital(pd) {
	return [ {
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.3.140.1.0.6.10.14.1",
			"extension" : pd.extension_bps
		} ],
		"vital" : {
			"name" : "Blood Pressure Systolic",
			"code" : "8480-6",
			"code_system_name" : "LOINC"
		},
		"status" : "completed",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.effectivetime),
				"precision" : "second"
			}
		},
		"value" : parseFloat(pd.bps),
		"unit" : "mm[Hg]"
	}, {
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.3.140.1.0.6.10.14.1",
			"extension" : pd.extension_bpd
		} ],
		"vital" : {
			"name" : "Blood Pressure Diastolic",
			"code" : "8462-4",
			"code_system_name" : "LOINC"
		},
		"status" : "completed",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.effectivetime),
				"precision" : "second"
			}
		},
		"interpretations": [
	        "UNK"
	    ],
		"value" : parseFloat(pd.bpd),
		"unit" : "mm[Hg]"
	}, {
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.3.140.1.0.6.10.14.1",
			"extension" : pd.extension_pulse
		} ],
		"vital" : {
			"name" : "Heart Rate",
			"code" : "8867-4",
			"code_system_name" : "LOINC"
		},
		"status" : "completed",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.effectivetime),
				"precision" : "second"
			}
		},
		"interpretations": [
	        "UNK"
	    ],
		"value" : parseFloat(pd.pulse),
		"unit" : "/min"
	}, {
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.3.140.1.0.6.10.14.1",
			"extension" : pd.extension_breath
		} ],
		"vital" : {
			"name" : "Respiratory Rate",
			"code" : "9279-1",
			"code_system_name" : "LOINC"
		},
		"status" : "completed",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.effectivetime),
				"precision" : "second"
			}
		},
		"interpretations": [
	        "UNK"
	    ],
		"value" : parseFloat(pd.breath),
		"unit" : "/min"
	}, {
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.3.140.1.0.6.10.14.1",
			"extension" : pd.extension_temperature
		} ],
		"vital" : {
			"name" : "Body Temperature",
			"code" : "8310-5",
			"code_system_name" : "LOINC"
		},
		"status" : "completed",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.effectivetime),
				"precision" : "second"
			}
		},
		"interpretations": [
	        "UNK"
	    ],
		"value" : parseFloat(pd.temperature),
		"unit" : "degF"
	}, {
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.3.140.1.0.6.10.14.1",
			"extension" : pd.extension_height
		} ],
		"vital" : {
			"name" : "Height",
			"code" : "8302-2",
			"code_system_name" : "LOINC"
		},
		"status" : "completed",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.effectivetime),
				"precision" : "second"
			}
		},
		"interpretations": [
	        "UNK"
	    ],
		"value" : parseFloat(pd.height),
		"unit" : pd.unit_height
	}, {
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.3.140.1.0.6.10.14.1",
			"extension" : pd.extension_weight
		} ],
		"vital" : {
			"name" : "Weight Measured",
			"code" : "3141-9",
			"code_system_name" : "LOINC"
		},
		"status" : "completed",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.effectivetime),
				"precision" : "second"
			}
		},
		"interpretations": [
	        "UNK"
	    ],
		"value" : parseFloat(pd.weight),
		"unit" : pd.unit_weight
	}, {
		"identifiers" : [ {
			"identifier" : "2.16.840.1.113883.3.140.1.0.6.10.14.1",
			"extension" : pd.extension_BMI
		} ],
		"vital" : {
			"name" : "BMI (Body Mass Index)",
			"code" : "39156-5",
			"code_system_name" : "LOINC"
		},
		"status" : "completed",
		"date_time" : {
			"point" : {
				"date" : fDate(pd.effectivetime),
				"precision" : "second"
			}
		},
		"interpretations": [
	        "UNK"
	    ],
		"value" : parseFloat(pd.BMI),
		"unit" : "kg/m2"
	} ];
}

function populateSocialHistory(pd) {
	return {
		"date_time" : {
			"low" : {
				"date" : fDate(pd.date),
				"precision" : "day"
			},
			"high" : {
				"date" : fDate(pd.date),
				"precision" : "second"
			}
		},
		"identifiers" : [ {
			"identifier" : pd.sha_extension,
			"extension" : pd.extension
		} ],
		"code" : {
			"name" : pd.element
		},
		"value" : pd.description
	};
}

function populateImmunization(pd) {
	return {
		"date_time" : {
			"point" : {
				"date" : fDate(pd.administered_on),
				"precision" : "month"
			}
		},
		"identifiers" : [ {
			"identifier" : "e6f1ba43-c0ed-4b9b-9f12-f435d8ad8f92"
		} ],
		"status" : "complete",
		"product" : {
			"product" : {
				"name" : pd.code_text,
				"code" : pd.cvx_code,
				"code_system_name" : "CVX",
				"translations" : [ {
					"name" : "NI",
					"code" : "NI",
					"code_system_name" : "CVX"
				} ]
			},
			"lot_number" : "1",
			"manufacturer" : "UNK"
		},
		"administration" : {
			"route" : {
				"name" : pd.route_of_administration,
				"code" : pd.route_code,
				"code_system_name" : "Medication Route FDA"
			},
			"dose" : {
				"value" : 50,
				"unit" : "mcg"
			}
		},
		"performer" : {
			"identifiers" : [ {
				"identifier" : "2.16.840.1.113883.19.5.9999.456",
				"extension" : "2981824"
			} ],
			"name" : [ {
				"last" : pd.lname,
				"first" : pd.fname
			} ],
			"address" : [ {
				"street_lines" : [ pd.address ],
				"city" : pd.city,
				"state" : pd.state,
				"zip" : pd.zip,
				"country" : "US"
			} ],
			"organization" : [ {
				"identifiers" : [ {
					"identifier" : "2.16.840.1.113883.19.5.9999.1394"
				} ],
				"name" : [ pd.facility_name ]
			} ]
		},
		"instructions" : {
			"code" : {
				"name" : "immunization education",
				"code" : "171044003",
				"code_system_name" : "SNOMED CT"
			},
			"free_text" : "Needs Attention for more data."
		}
	}
	
}

function populatePayer(pd){
	return {
	    "identifiers": [
	        {
	            "identifier": "1fe2cdd0-7aad-11db-9fe1-0800200c9a66"
	        }
	    ],
	    "policy": {
	        "identifiers": [
	            {
	                "identifier": "3e676a50-7aac-11db-9fe1-0800200c9a66"
	            }
	        ],
	        "code": {
	            "code": "SELF",
	            "code_system_name": "HL7 RoleCode"
	        },
	        "insurance": {
	            "code": {
	                "code": "PAYOR",
	                "code_system_name": "HL7 RoleCode"
	            },
	            "performer": {
	                "identifiers": [
	                    {
	                        "identifier": "2.16.840.1.113883.19"
	                    }
	                ],
	                "address": [
	                    {
	                        "street_lines": [
	                            "123 Insurance Road"
	                        ],
	                        "city": "Blue Bell",
	                        "state": "MA",
	                        "zip": "02368",
	                        "country": "US",
	                        "use": "work place"
	                    }
	                ],
	                "phone": [
	                    {
	                        "number": "(781)555-1515",
	                        "type": "work place"
	                    }
	                ],
	                "organization": [
	                    {
	                        "name": [
	                            "Good Health Insurance"
	                        ],
	                        "address": [
	                            {
	                                "street_lines": [
	                                    "123 Insurance Road"
	                                ],
	                                "city": "Blue Bell",
	                                "state": "MA",
	                                "zip": "02368",
	                                "country": "US",
	                                "use": "work place"
	                            }
	                        ],
	                        "phone": [
	                            {
	                                "number": "(781)555-1515",
	                                "type": "work place"
	                            }
	                        ]
	                    }
	                ],
	                "code": [
	                    {
	                        "code": "PAYOR",
	                        "code_system_name": "HL7 RoleCode"
	                    }
	                ]
	            }
	        }
	    },
	    "guarantor": {
	        "code": {
	            "code": "GUAR",
	            "code_system_name": "HL7 Role"
	        },
	        "identifiers": [
	            {
	                "identifier": "329fcdf0-7ab3-11db-9fe1-0800200c9a66"
	            }
	        ],
	        "name": [
	            {
	                "prefix": "Mr.",
	                "middle": [
	                    "Frankie"
	                ],
	                "last": "Everyman",
	                "first": "Adam"
	            }
	        ],
	        "address": [
	            {
	                "street_lines": [
	                    "17 Daws Rd."
	                ],
	                "city": "Blue Bell",
	                "state": "MA",
	                "zip": "02368",
	                "country": "US",
	                "use": "primary home"
	            }
	        ],
	        "phone": [
	            {
	                "number": "(781)555-1212",
	                "type": "primary home"
	            }
	        ]
	    },
	    "participant": {
	        "code": {
	            "name": "Self",
	            "code": "SELF",
	            "code_system_name": "HL7 Role"
	        },
	        "performer": {
	            "identifiers": [
	                {
	                    "identifier": "14d4a520-7aae-11db-9fe1-0800200c9a66",
	                    "extension": "1138345"
	                }
	            ],
	            "address": [
	                {
	                    "street_lines": [
	                        "17 Daws Rd."
	                    ],
	                    "city": "Blue Bell",
	                    "state": "MA",
	                    "zip": "02368",
	                    "country": "US",
	                    "use": "primary home"
	                }
	            ],
	            "code": [
	                {
	                    "name": "Self",
	                    "code": "SELF",
	                    "code_system_name": "HL7 Role"
	                }
	            ]
	        },
	        "name": [
	            {
	                "prefix": "Mr.",
	                "middle": [
	                    "A."
	                ],
	                "last": "Everyman",
	                "first": "Frank"
	            }
	        ]
	    },
	    "policy_holder": {
	        "performer": {
	            "identifiers": [
	                {
	                    "identifier": "2.16.840.1.113883.19",
	                    "extension": "1138345"
	                }
	            ],
	            "address": [
	                {
	                    "street_lines": [
	                        "17 Daws Rd."
	                    ],
	                    "city": "Blue Bell",
	                    "state": "MA",
	                    "zip": "02368",
	                    "country": "US",
	                    "use": "primary home"
	                }
	            ]
	        }
	    },
	    "authorization": {
	        "identifiers": [
	            {
	                "identifier": "f4dce790-8328-11db-9fe1-0800200c9a66"
	            }
	        ],
	        "procedure": {
	            "code": {
	                "name": "Colonoscopy",
	                "code": "73761001",
	                "code_system_name": "SNOMED CT"
	            }
	        }
	    }
	}
}
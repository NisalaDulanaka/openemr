{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Automated OpenEMR 5.0.0.4 Configuration",

  "Parameters" : {
    "EC2KeyPair" : {
      "Description" : "Amazon EC2 Key Pair",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "RDSPassword" : {
      "NoEcho" : "true",
      "Description" : "The database admin account password",
      "Type" : "String",
      "MinLength" : "8",
      "MaxLength" : "41"
    },
    "TimeZone": {
      "Type": "String",
      "Default": "America/Chicago",
      "MaxLength": "41",
      "Description" : "The timezone OpenEMR will run in"
    },
    "PatientRecords": {
      "Type": "Number",
      "Default": "10",
      "MinValue": "10",
      "Description": "Database storage for patient records (minimum is 10 in GB)"
    },
    "DocumentStorage": {
      "Type": "Number",
      "Default": "500",
      "MinValue": "500",
      "Description": "Document database for patient documents (minimum is 500 in GB)"
    }
  },

  "Conditions" : {
    "DevOnly" : {"Fn::Equals" : ["false", "yes"]}
  },

  "Mappings" : {

    "RegionData" : {
      "us-east-1" : {
        "RegionBucket": "openemr-useast1",
        "ApplicationSource": "beanstalk/openemr-5.0.0-006.zip",
        "MySQLVersion": "5.6.27",
        "AmazonAMI": "ami-a4c7edb2",
        "UbuntuAMI": "ami-d15a75c7"
      },
      "us-west-2" : {
        "RegionBucket": "openemr-uswest2",
        "ApplicationSource": "beanstalk/openemr-5.0.0-006.zip",
        "MySQLVersion": "5.6.27",
        "AmazonAMI": "ami-6df1e514",
        "UbuntuAMI": "ami-835b4efa"
      },
      "eu-west-1" : {
        "RegionBucket": "openemr-euwest1",
        "ApplicationSource": "beanstalk/openemr-5.0.0-006.zip",
        "MySQLVersion": "5.6.27",
        "AmazonAMI": "ami-d7b9a2b1",
        "UbuntuAMI": "ami-6d48500b"
      },
      "ap-southeast-2" : {
        "RegionBucket": "openemr-apsoutheast2",
        "ApplicationSource": "beanstalk/openemr-5.0.0-006.zip",
        "MySQLVersion": "5.6.27",
        "AmazonAMI": "ami-10918173",
        "UbuntuAMI": "ami-e94e5e8a"
      }
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [
			{"Key" : "Name", "Value" : "OpenEMR" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

    "SubnetPublic1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.1.0/24",
		"AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
        "Tags" : [
			{"Key" : "Name", "Value" : "Public #1" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

	"SubnetPrivate1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.2.0/24",
		"AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
        "Tags" : [
			{"Key" : "Name", "Value" : "Private #1" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

	"SubnetPublic2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.3.0/24",
		"AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" } ] },
        "Tags" : [
			{"Key" : "Name", "Value" : "Public #2" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

	"SubnetPrivate2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.4.0/24",
		"AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" } ] },
        "Tags" : [
			{"Key" : "Name", "Value" : "Private #2" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTablePublic" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "RoutePublic" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePublic" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociationPublic1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPublic1" },
        "RouteTableId" : { "Ref" : "RouteTablePublic" }
      }
    },

	"SubnetRouteTableAssociationPublic2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPublic2" },
        "RouteTableId" : { "Ref" : "RouteTablePublic" }
      }
    },

	"RouteTablePrivate" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

	"EIPNATGatewayPublic1" : {
	  "Type" : "AWS::EC2::EIP",
	  "Properties" : {
		"Domain" : "vpc"
	  }
	},

	"NATGatewayPublic1" : {
	  "Type" : "AWS::EC2::NatGateway",
	  "Properties" : {
		"AllocationId" : { "Fn::GetAtt" : ["EIPNATGatewayPublic1", "AllocationId"]},
		"SubnetId" : { "Ref" : "SubnetPublic1"}
	  }
	},

	"RoutePrivate" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePrivate" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NATGatewayPublic1" }
      }
    },

	"SubnetRouteTableAssociationPrivate1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPrivate1" },
        "RouteTableId" : { "Ref" : "RouteTablePrivate" }
      }
    },

	"SubnetRouteTableAssociationPrivate2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPrivate2" },
        "RouteTableId" : { "Ref" : "RouteTablePrivate" }
      }
    },

    "DNS": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "HostedZoneConfig": {
          "Comment": "private OpenEMR domain"
        },
        "Name": "openemr.local",
        "VPCs": [{
          "VPCId": { "Ref" : "VPC"},
          "VPCRegion": { "Ref": "AWS::Region"}
        }]
      }
    },

    "ApplicationSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
         "GroupDescription" : "Application Security Group",
         "Tags" :  [ { "Key" : "Name", "Value" : "Application" } ],
         "VpcId" : {"Ref" : "VPC"}
      }
    },

    "AppSGIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
          "GroupId": { "Ref": "ApplicationSecurityGroup" },
          "IpProtocol": "-1",
          "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
      }
    },

    "SSHSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Condition": "DevOnly",
      "Properties" : {
         "GroupDescription" : "Public SSH Access",
         "Tags" :  [ { "Key" : "Name", "Value" : "Global SSH" } ],
         "VpcId" : {"Ref" : "VPC"}
      }
    },

    "SSHSGIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "DevOnly",
      "Properties": {
          "GroupId": { "Ref": "SSHSecurityGroup" },
          "IpProtocol": "tcp",
          "CidrIp": "0.0.0.0/0",
          "FromPort": "22",
          "ToPort": "22"
      }
    },

    "DeveloperBastion": {
      "Type": "AWS::EC2::Instance",
      "Condition" : "DevOnly",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "AmazonAMI"] },
        "InstanceType"   : "t2.nano",
        "KeyName"        : { "Ref" : "EC2KeyPair" },
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "GroupSet": [ {"Ref" : "SSHSecurityGroup"}, {"Ref" : "ApplicationSecurityGroup"} ],
          "SubnetId": { "Ref" : "SubnetPublic2" }
        } ],
        "Tags" : [ { "Key" : "Name", "Value" : "Developer Bastion" } ]
      }
    },

    "OpenEMRKey" : {
      "Type" : "AWS::KMS::Key",
      "DeletionPolicy": "Retain",
      "Properties" : {
        "Description" : "Encrypts Patient Records",
        "KeyPolicy" : {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "root"
                      ]
                    ]
                  }
                ]
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        }
      }
    },

    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
          "BucketName" : { "Fn::Join" : [ "-", [
            "openemr",
            { "Fn::Select" : [ "2", { "Fn::Split": ["/", {"Ref": "AWS::StackId"}]}] }
          ] ] }
      }
    },

    "BucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : {"Ref" : "S3Bucket"},
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSCloudTrailAclCheck",
              "Effect": "Allow",
              "Principal": { "Service":"cloudtrail.amazonaws.com"},
              "Action": "s3:GetBucketAcl",
              "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}]]}
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": { "Service":"cloudtrail.amazonaws.com"},
              "Action": "s3:PutObject",
              "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/AWSLogs/", {"Ref":"AWS::AccountId"}, "/*"]]},
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },

    "CertWriterPolicy" : {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "Policy for initial CA writer",
        "PolicyDocument" :   {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "Stmt1500612724000",
                  "Effect": "Allow",
                  "Action": [
                      "s3:*"
                  ],
                  "Resource": [
                      { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/CA/*"]]}
                  ]
              },
              {
                  "Sid": "Stmt1500612724001",
                  "Effect": "Allow",
                  "Action": [
                      "s3:ListBucket"
                  ],
                  "Resource": [
                      { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}]]}
                  ]
              },
              {
                  "Sid": "Stmt1500612724002",
                  "Effect": "Allow",
                  "Action": [
                      "kms:GenerateDataKey*"
                  ],
                  "Resource": [
                    { "Fn::GetAtt" : ["OpenEMRKey", "Arn" ] }
                  ]
              }
          ]
        }
      }
    },

  "CertWriterRole" : {
    "Type": "AWS::IAM::Role",
     "Properties": {
        "AssumeRolePolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Principal": {
                 "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
           } ]
        },
        "Path": "/",
        "ManagedPolicyArns" : [{ "Ref" : "CertWriterPolicy"}]
        }
  },

  "CertWriterInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
          "Path": "/",
          "Roles": [
              {
                  "Ref": "CertWriterRole"
              }
          ]
      }
  },

  "CertWriterInstance": {
    "Type": "AWS::EC2::Instance",
    "DependsOn" : "SubnetRouteTableAssociationPrivate1",
    "Properties": {
      "ImageId" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "AmazonAMI"] },
      "InstanceType"   : "t2.nano",
      "SubnetId"       : { "Ref": "SubnetPrivate1"},
      "KeyName"        : { "Ref" : "EC2KeyPair" },
      "IamInstanceProfile": { "Ref": "CertWriterInstanceProfile" },
      "Tags" : [ { "Key" : "Name", "Value" : "Backend CA Processor" } ],
      "InstanceInitiatedShutdownBehavior" : "terminate",
      "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
           "#!/bin/bash -xe\n",
          "cd /root\n",
          "mkdir -m 700 CA CA/certs CA/keys CA/work\n",
          "cd CA\n",
          "openssl genrsa -out keys/ca.key 8192\n",
          "openssl req -new -x509 -extensions v3_ca -key keys/ca.key -out certs/ca.crt -days 3650 -subj '/CN=OpenEMR Backend CA'\n",
          "openssl req -new -nodes -newkey rsa:2048 -keyout keys/beanstalk.key -out work/beanstalk.csr -days 3648 -subj /CN=beanstalk.openemr.local\n",
          "openssl x509 -req -in work/beanstalk.csr -out certs/beanstalk.crt -CA certs/ca.crt -CAkey keys/ca.key -CAcreateserial\n",
          "openssl req -new -nodes -newkey rsa:2048 -keyout keys/couch.key -out work/couch.csr -days 3648 -subj /CN=couchdb.openemr.local\n",
          "openssl x509 -req -in work/couch.csr -out certs/couch.crt -CA certs/ca.crt -CAkey keys/ca.key\n",
          "aws s3 sync keys s3://", { "Ref" : "S3Bucket" }, "/CA/keys --sse aws:kms --sse-kms-key-id ", { "Ref" : "OpenEMRKey" }, " --acl private\n",
          "aws s3 sync certs s3://", { "Ref" : "S3Bucket" }, "/CA/certs --acl public-read\n",
           "/opt/aws/bin/cfn-signal -e 0 ",
           "         --stack ", { "Ref" : "AWS::StackName" },
           "         --resource CertWriterInstance ",
           "         --region ", { "Ref" : "AWS::Region" }, "\n",
           "#done forever\n",
           "shutdown -h now", "\n"
      ]]}}
    },
    "CreationPolicy" : {
      "ResourceSignal" : {
        "Timeout" : "PT5M"
      }
    }
  },

  "EFSSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
       "GroupDescription" : "EFS Access",
       "Tags" :  [ { "Key" : "Name", "Value" : "BeanstalkAccess" } ],
       "VpcId" : {"Ref" : "VPC"}
    }
  },

  "EFSSGIngress": {
    "Type": "AWS::EC2::SecurityGroupIngress",
    "Properties": {
        "GroupId": { "Ref": "EFSSecurityGroup" },
        "IpProtocol": "-1",
        "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
    }
  },

  "ElasticFileSystem" : {
    "Type" : "AWS::EFS::FileSystem",
    "DeletionPolicy": "Retain",
    "Properties" : {
      "FileSystemTags" : [ { "Key" : "Name", "Value" : "OpenEMR Codebase" } ]
    }
  },

  "DNSEFS" : {
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn" : ["EFSMountPrivate1", "EFSMountPrivate2"],
      "Properties" : {
         "HostedZoneId" : { "Ref" : "DNS" },
         "Name" : "nfs.openemr.local",
         "Type" : "CNAME",
         "TTL" : "900",
         "ResourceRecords" : [ { "Fn::Join" : [ "", [
            {"Ref" : "ElasticFileSystem"},
            ".efs.",
            {"Ref" : "AWS::Region"},
            ".amazonaws.com"
            ]]}]
      }
   },

  "EFSMountPrivate1": {
    "Type": "AWS::EFS::MountTarget",
    "Properties": {
      "FileSystemId": { "Ref": "ElasticFileSystem" },
      "SubnetId": { "Ref": "SubnetPrivate1" },
      "SecurityGroups": [ { "Ref": "EFSSecurityGroup" } ]
    }
  },

  "EFSMountPrivate2": {
    "Type": "AWS::EFS::MountTarget",
    "Properties": {
      "FileSystemId": { "Ref": "ElasticFileSystem" },
      "SubnetId": { "Ref": "SubnetPrivate2" },
      "SecurityGroups": [ { "Ref": "EFSSecurityGroup" } ]
    }
  },

  "EFSBackupSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
       "GroupDescription" : "EFS Backup Access",
       "Tags" :  [ { "Key" : "Name", "Value" : "BeanstalkBackupAccess" } ],
       "VpcId" : {"Ref" : "VPC"}
    }
  },

  "EFSBackupSGIngress": {
    "Type": "AWS::EC2::SecurityGroupIngress",
    "Properties": {
        "GroupId": { "Ref": "EFSSecurityGroup" },
        "IpProtocol": "-1",
        "SourceSecurityGroupId" : { "Ref": "EFSBackupSecurityGroup"}
    }
  },

  "NFSBackupPolicy" : {
    "Type" : "AWS::IAM::ManagedPolicy",
    "Properties" : {
      "Description" : "Policy to operate backups",
      "PolicyDocument" :   {
        "Version": "2012-10-17",
        "Statement": [
            {
              "Sid": "Stmt1500699052003",
              "Effect": "Allow",
              "Action": ["s3:ListBucket"],
              "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}]]}
            },
            {
                "Sid": "Stmt1500699052000",
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject"
                ],
                "Resource": [
                    { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/Backup/*"]]}
                ]
            },
            {
                "Sid": "Stmt1500612724002",
                "Effect": "Allow",
                "Action": [
                  "kms:Encrypt",
                  "kms:Decrypt",
                  "kms:GenerateDataKey*"
                ],
                "Resource": [ { "Fn::GetAtt" : ["OpenEMRKey", "Arn" ] } ]
            }
        ]
      }
    }
  },

  "NFSBackupRole" : {
    "Type": "AWS::IAM::Role",
     "Properties": {
        "AssumeRolePolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Principal": {
                 "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
           } ]
        },
        "Path": "/",
        "ManagedPolicyArns" : [{ "Ref" : "NFSBackupPolicy"}]
        }
  },

  "NFSBackupInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
          "Path": "/",
          "Roles": [
              {
                  "Ref": "NFSBackupRole"
              }
          ]
      }
  },

  "NFSBackupInstance": {
    "Type": "AWS::EC2::Instance",
    "Metadata" : {
      "AWS::CloudFormation::Init" : {
        "configSets" : {
          "Setup" : [ "Install" ]
        },

        "Install" : {
          "files" : {
            "/root/setup.sh" : {
              "content" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",
                "S3=", { "Ref" : "S3Bucket" }, "\n",
                "KMS=", { "Ref" : "OpenEMRKey" }, "\n",
                "apt-get -y update\n",
                "DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" --force-yes\n",
                "apt-get -y install duplicity python-boto nfs-common awscli\n",
                "mkdir /mnt/efs\n",
                "echo \"nfs.openemr.local:/ /mnt/efs nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0\" >> /etc/fstab\n",
                "mount /mnt/efs\n",
                "touch /tmp/mypass\n",
                "chmod 500 /tmp/mypass\n",
                "openssl rand -base64 32 >> /tmp/mypass\n",
                "aws s3 cp /tmp/mypass s3://$S3/Backup/passphrase.txt --sse aws:kms --sse-kms-key-id $KMS\n",
                "rm /tmp/mypass\n"
                ]]},
              "mode"  : "000500",
              "owner" : "root",
              "group" : "root"
            },
            "/etc/cron.daily/backup.sh" : {
              "content" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",
                "S3=", { "Ref" : "S3Bucket" }, "\n",
                "KMS=", { "Ref" : "OpenEMRKey" }, "\n",
                "PASSPHRASE=`aws s3 cp s3://$S3/Backup/passphrase.txt - --sse aws:kms --sse-kms-key-id $KMS`\n",
                "export PASSPHRASE\n",
                "duplicity --full-if-older-than 1M /mnt/efs s3://s3.amazonaws.com/$S3/Backup\n",
                "duplicity remove-all-but-n-full 2 --force s3://s3.amazonaws.com/$S3/Backup\n"
                ]]},
              "mode"  : "000500",
              "owner" : "root",
              "group" : "root"
            },
            "/root/recovery.sh" : {
              "content" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",
                "S3=", { "Ref" : "S3Bucket" }, "\n",
                "KMS=", { "Ref" : "OpenEMRKey" }, "\n",
                "PASSPHRASE=`aws s3 cp s3://$S3/Backup/passphrase.txt - --sse aws:kms --sse-kms-key-id $KMS`\n",
                "export PASSPHRASE\n",
                "duplicity --force s3://s3.amazonaws.com/$S3/Backup /mnt/efs\n"
                ]]},
              "mode"  : "000500",
              "owner" : "root",
              "group" : "root"
            }
          },
          "commands" : {
            "01_setup" : {
              "command" : "/root/setup.sh"
            }

          }
        }
      }
    },
    "DependsOn" : "DNSEFS",
    "Properties": {
      "ImageId" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "UbuntuAMI"] },
      "InstanceType"   : "t2.micro",
      "SubnetId"       : { "Ref": "SubnetPrivate2"},
      "SecurityGroupIds" : [ {"Ref" : "EFSBackupSecurityGroup"} ],
      "KeyName"        : { "Ref" : "EC2KeyPair" },
      "IamInstanceProfile": { "Ref": "NFSBackupInstanceProfile" },
      "Tags" : [ { "Key" : "Name", "Value" : "EFS Backup Server" } ],
      "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
           "#!/bin/bash -xe\n",
           "exec > /tmp/part-001.log 2>&1\n",
           "apt-get -y update\n",
           "apt-get -y install python-pip\n",
           "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
           "cfn-init -v ",
           "         --stack ", { "Ref" : "AWS::StackName" },
           "         --resource NFSBackupInstance ",
           "         --configsets Setup ",
           "         --region ", { "Ref" : "AWS::Region" }, "\n",
           "cfn-signal -e 0 ",
           "         --stack ", { "Ref" : "AWS::StackName" },
           "         --resource NFSBackupInstance ",
           "         --region ", { "Ref" : "AWS::Region" }, "\n"
      ]]}}
    },
    "CreationPolicy" : {
      "ResourceSignal" : {
        "Timeout" : "PT5M"
      }
    }
  },

  "RDSSubnetGroup": {
     "Type" : "AWS::RDS::DBSubnetGroup",
     "Properties" : {
        "DBSubnetGroupDescription" : "OpenEMR DB Subnet",
        "SubnetIds" : [ {"Ref":"SubnetPrivate1"}, {"Ref":"SubnetPrivate2"} ]
     }
  },

  "DBSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
       "GroupDescription" : "RDS Access",
       "Tags" :  [ { "Key" : "Name", "Value" : "PatientRecordsAccess" } ],
       "VpcId" : {"Ref" : "VPC"}
    }
  },

  "DBSGIngress": {
    "Type": "AWS::EC2::SecurityGroupIngress",
    "Properties": {
        "GroupId": { "Ref": "DBSecurityGroup" },
        "IpProtocol": "-1",
        "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
    }
  },

  "RDSInstance" : {
     "Type" : "AWS::RDS::DBInstance",
     "DeletionPolicy": "Snapshot",
     "Properties" : {
        "DBName" : "openemr",
        "AllocatedStorage" : {"Ref": "PatientRecords"},
        "DBInstanceClass" : "db.t2.small",
        "Engine" : "MySQL",
        "EngineVersion" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "MySQLVersion"]},
        "MasterUsername" : "openemr",
        "MasterUserPassword" : { "Ref" : "RDSPassword" },
        "PubliclyAccessible": "false",
        "DBSubnetGroupName": {"Ref": "RDSSubnetGroup"},
        "VPCSecurityGroups": [{"Ref": "DBSecurityGroup"}],
        "KmsKeyId": {"Ref" : "OpenEMRKey"},
        "StorageEncrypted": "true",
        "MultiAZ": "false",
        "Tags" : [ { "Key" : "Name", "Value" : "Patient Records" } ]
     }
  },

  "DNSRDS" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneId" : { "Ref" : "DNS" },
         "Name" : "mysql.openemr.local",
         "Type" : "CNAME",
         "TTL" : "900",
         "ResourceRecords" : [ { "Fn::GetAtt" : ["RDSInstance", "Endpoint.Address" ] } ]
      }
   },

  "CloudTrail": {
    "DependsOn" : ["BucketPolicy"],
    "Type": "AWS::CloudTrail::Trail",
    "Properties": {
      "IsLogging": "true",
      "IncludeGlobalServiceEvents" : "true",
      "IsMultiRegionTrail" : "true",
      "S3BucketName": { "Ref" : "S3Bucket" }
    }
  },

  "RedisSubnetGroup" :  {
    "Type": "AWS::ElastiCache::SubnetGroup",
    "Properties": {
        "Description": "Redis node locations",
        "SubnetIds": [
            {
                "Ref": "SubnetPrivate2"
            },
            {
                "Ref": "SubnetPrivate1"
            }
        ]
      }
    },

  "RedisSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
       "GroupDescription" : "Redis Access",
       "Tags" :  [ { "Key" : "Name", "Value" : "OpenEMR Sessions" } ],
       "VpcId" : {"Ref" : "VPC"}
    }
  },

  "RedisSGIngress": {
    "Type": "AWS::EC2::SecurityGroupIngress",
    "Properties": {
        "GroupId": { "Ref": "RedisSecurityGroup" },
        "IpProtocol": "-1",
        "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
    }
  },

   "RedisCluster" : {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheNodeType"           : "cache.t2.small",
        "VpcSecurityGroupIds": [{"Fn::GetAtt": [ "RedisSecurityGroup", "GroupId"]}],
        "CacheSubnetGroupName"    : { "Ref": "RedisSubnetGroup"},
        "Engine"                  : "redis",
        "NumCacheNodes"           : "1"
      }
    },

    "DNSRedis" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneId" : { "Ref" : "DNS" },
         "Name" : "redis.openemr.local",
         "Type" : "CNAME",
         "TTL" : "900",
         "ResourceRecords" : [{ "Fn::GetAtt" : ["RedisCluster", "RedisEndpoint.Address"]}
 ]
      }
   },

    "CouchDBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
         "GroupDescription" : "CouchDB Access",
         "Tags" :  [ { "Key" : "Name", "Value" : "PatientDocumentsAccess" } ],
         "VpcId" : {"Ref" : "VPC"}
      }
    },

    "CouchDBSGIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
          "GroupId": { "Ref": "CouchDBSecurityGroup" },
          "IpProtocol": "-1",
          "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
      }
    },

    "CouchDBVolume" : {
       "Type" : "AWS::EC2::Volume",
       "DeletionPolicy": "Snapshot",
       "Properties" : {
          "Size" : {"Ref": "DocumentStorage"},
          "AvailabilityZone" : { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
          "VolumeType" : "sc1",
          "Encrypted": "true",
          "KmsKeyId" : {"Ref" : "OpenEMRKey"},
          "Tags" : [ { "Key" : "Name", "Value" : "Patient Documents" } ]
       }
    },

    "CouchDBPolicy" : {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "Policy to retrieve CouchDB SSL credentials",
        "PolicyDocument" :   {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "Stmt1500699052000",
                  "Effect": "Allow",
                  "Action": [
                      "s3:GetObject"
                  ],
                  "Resource": [
                      { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/CA/certs/*"]]},
                      { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/CA/keys/couch.key"]]}
                  ]
              },
              {
                  "Sid": "Stmt1500612724002",
                  "Effect": "Allow",
                  "Action": [
                      "kms:Decrypt"
                  ],
                  "Resource": [ { "Fn::GetAtt" : ["OpenEMRKey", "Arn" ] } ]
              }
          ]
        }
      }
    },

  "CouchDBRole" : {
    "Type": "AWS::IAM::Role",
     "Properties": {
        "AssumeRolePolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Principal": {
                 "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
           } ]
        },
        "Path": "/",
        "ManagedPolicyArns" : [{ "Ref" : "CouchDBPolicy"}]
        }
  },

  "CouchDBInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
          "Path": "/",
          "Roles": [
              {
                  "Ref": "CouchDBRole"
              }
          ]
      }
  },

    "CouchDBInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "Setup" : [ "Install" ]
          },

          "Install" : {
            "files" : {
              "/tmp/ip.ini" : {
                "content" : { "Fn::Join" : ["\n", [
                  "[httpd]",
                  "bind_address = 0.0.0.0"
                  ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/ssl.ini" : {
                "content" : { "Fn::Join" : ["\n", [
                  "[daemons]",
                  "httpsd = {couch_httpd, start_link, [https]}",
                  "[ssl]",
                  "port = 6984",
                  "key_file = /etc/couchdb/couch.key",
                  "cert_file = /etc/couchdb/couch.crt",
                  "cacert_file = /etc/couchdb/ca.crt"
                  ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/fstab.append" : {
                "content" : { "Fn::Join" : ["", [
                  "/dev/xvdd /mnt/db ext4 defaults,nofail 0 0\n"
                  ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/couchdb.setup.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash -xe\n",
                  "exec > /tmp/part-002.log 2>&1\n",
                  "DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" --force-yes\n",
                  "mkfs -t ext4 /dev/xvdd\n",
                  "mkdir /mnt/db\n",
                  "cat /tmp/fstab.append >> /etc/fstab\n",
                  "mount /mnt/db\n",
                  "apt-get -y install couchdb awscli\n",
                  "service couchdb stop\n",
                  "aws configure set s3.signature_version s3v4\n",
                  "aws s3 cp s3://" , { "Ref" : "S3Bucket" }, "/CA/certs/ca.crt /etc/couchdb\n",
                  "aws s3 cp s3://" , { "Ref" : "S3Bucket" }, "/CA/certs/couch.crt /etc/couchdb\n",
                  "chmod 664 /etc/couchdb/*.crt\n",
                  "aws s3 cp s3://" , { "Ref" : "S3Bucket" }, "/CA/keys/couch.key /etc/couchdb --sse aws:kms --sse-kms-key-id ", { "Ref" : "OpenEMRKey" }, "\n",
                  "chmod 660 /etc/couchdb/couch.key\n",
                  "chown couchdb:couchdb /etc/couchdb/*.crt /etc/couchdb/*.key\n",
                  "mv /var/lib/couchdb /mnt/db/couchdb\n",
                  "ln -s /mnt/db/couchdb /var/lib/couchdb\n",
                  "cp /tmp/ip.ini /tmp/ssl.ini /etc/couchdb/local.d\n",
                  "chown couchdb:couchdb /etc/couchdb/local.d/ip.ini /etc/couchdb/local.d/ssl.ini\n",
                  "service couchdb restart\n"
                  ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_security" : {
                "command" : "/tmp/couchdb.setup.sh"
              }

            }
          }
        }
      },
      "DependsOn" : "CertWriterInstance",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "UbuntuAMI"] },
        "InstanceType"   : "t2.micro",
        "SubnetId"       : { "Ref": "SubnetPrivate1"},
        "SecurityGroupIds" : [ {"Ref" : "CouchDBSecurityGroup"} ],
        "KeyName"        : { "Ref" : "EC2KeyPair" },
        "IamInstanceProfile": { "Ref": "CouchDBInstanceProfile" },
        "Volumes"        : [{
              "Device" : "/dev/sdd",
              "VolumeId" : { "Ref" : "CouchDBVolume" }
        }],
        "Tags" : [ { "Key" : "Name", "Value" : "CouchDB Server" } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "exec > /tmp/part-001.log 2>&1\n",
             "apt-get -y update\n",
             "apt-get -y install python-pip\n",
             "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
             "cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource CouchDBInstance ",
             "         --configsets Setup ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",
             "cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource CouchDBInstance ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      }
    },

    "DNSCouchDB" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneId" : { "Ref" : "DNS" },
         "Name" : "couchdb.openemr.local",
         "Type" : "CNAME",
         "TTL" : "900",
         "ResourceRecords" : [ { "Fn::GetAtt" : [ "CouchDBInstance", "PrivateDnsName" ] } ]
      }
   },

    "DocumentBackupExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              { "Effect": "Allow", "Action": ["logs:*"], "Resource": "arn:aws:logs:*:*:*" },
              {
                  "Effect": "Allow",
                  "Action": [
                      "ec2:DescribeVolumeStatus",
                      "ec2:DescribeSnapshots",
                      "ec2:CreateSnapshot",
                      "ec2:DeleteSnapshot"
                  ],
                  "Resource": [
                      "*"
                  ]
              }
            ]
          }
        }]
      }
    },

    "DocumentBackupManagerFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "handles patient document (CouchDB) backups",
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt" : ["DocumentBackupExecutionRole", "Arn"] },
        "Code": {
          "ZipFile" : { "Fn::Join" : ["\n", [
            "import boto3",
            "import os",
            "def lambda_handler(event, context):",
            "  volume = boto3.session.Session(region_name = os.environ['AWS_DEFAULT_REGION']).resource('ec2').Volume(os.environ['VOLUME_ID'])",
            "  volume.create_snapshot(os.environ['DESCRIPTION'])",
            "  snapshots = sorted(volume.snapshots.all(), key=lambda x: x.start_time)",
            "  if len(snapshots) > os.environ['COUNTRETAINED']:",
            "    for i in range(0,len(snapshots)-os.environ['COUNTRETAINED']):",
            "      snapshots[i].delete()",
            "  return 'all OK'"
          ]]}
        },
        "Environment": {
          "Variables": {
            "VOLUME_ID" : { "Ref" : "CouchDBVolume"},
            "DESCRIPTION" : "OpenEMR document backup",
            "COUNTRETAINED" : 3
          }
        },
        "Runtime": "python2.7",
        "Timeout": "15"
      }
    },

    "DocumentBackupScheduler": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["DocumentBackupManagerFunction", "Arn"] },
          "Id": "BackupManagerV1"
        }]
      }
    },

    "DocumentBackupSchedulerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "DocumentBackupManagerFunction" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["DocumentBackupScheduler", "Arn"] }
      }
    },

    "BarebonesLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              { "Effect": "Allow", "Action": ["logs:*"], "Resource": "arn:aws:logs:*:*:*" }
            ]
          }
        }]
      }
    },

    "CertGrabberFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "gets a certificate's embedded key",
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt" : ["BarebonesLambdaRole", "Arn"] },
        "Code": {
          "ZipFile" : { "Fn::Join" : ["\n", [
            "import urllib2",
            "import json",
            "def lambda_handler(event, context):",
            "  if (event['RequestType'] == 'Delete'):",
            "    sendResponse(event, context, 'SUCCESS', None)",
            "    return",
            "  sendResponse(event, context, 'SUCCESS', urllib2.urlopen(event['ResourceProperties']['Url']).read()[28:-27])",
            "def sendResponse(event, context, responseStatus, responseData):",
            "  opener = urllib2.build_opener(urllib2.HTTPHandler)",
            "  o = {}",
            "  o['Status'] = responseStatus",
            "  o['Reason'] = 'log ' + context.log_stream_name",
            "  o['PhysicalResourceId'] = context.log_stream_name",
            "  o['StackId'] = event['StackId']",
            "  o['RequestId'] = event['RequestId']",
            "  o['LogicalResourceId'] = event['LogicalResourceId']",
            "  o['Data'] = {'PublicKey': responseData}",
            "  r = json.dumps(o)",
            "  request = urllib2.Request(event['ResponseURL'], data=r)",
            "  request.add_header('Content-Type', '')",
            "  request.add_header('Content-Length', len(r))",
            "  request.get_method = lambda: 'PUT'",
            "  url = opener.open(request)"
          ]]}
        },
        "Runtime": "python2.7",
        "Timeout": "5"
      }
    },

    "EBCert" : {
      "Type" : "Custom::FetchPublicKey",
      "DependsOn": "CertWriterInstance",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["CertGrabberFunction", "Arn"] },
        "Url" : { "Fn::Join" : ["", ["https://", {"Ref" : "S3Bucket"}, ".s3.amazonaws.com/CA/certs/beanstalk.crt" ] ] }
      }
    },

    "BeanstalkInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "rootBeanstalk",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "BucketAccess",
                "Action": [
                  "s3:Get*",
                  "s3:List*",
                  "s3:PutObject"
                ],
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:s3:::elasticbeanstalk-*",
                  "arn:aws:s3:::elasticbeanstalk-*/*"
                ]
              },
              {
                "Sid": "XRayAccess",
                "Action":[
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Sid": "CloudWatchLogsAccess",
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream"
                ],
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
                ]
              }
            ]
          }
        },
        {
          "PolicyName": "certGrabber",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Sid": "Stmt1500699052000",
                  "Effect": "Allow",
                  "Action": [
                      "s3:GetObject"
                  ],
                  "Resource": [
                      { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/CA/certs/*"]]},
                      { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/CA/keys/beanstalk.key"]]}
                  ]
              },
              {
                  "Sid": "Stmt1500612724002",
                  "Effect": "Allow",
                  "Action": [
                      "kms:Decrypt"
                  ],
                  "Resource": [ { "Fn::GetAtt" : ["OpenEMRKey", "Arn" ] } ]
              }
            ]
          }
        }]
      }
    },

    "BeanstalkInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
            "Path": "/",
            "Roles": [
                {
                    "Ref": "BeanstalkInstanceRole"
                }
            ]
        }
    },

    "EBApplication" : {
      "Type" : "AWS::ElasticBeanstalk::Application",
      "Properties" : {
        "Description" : "OpenEMR Application Stack"
      }
    },

    "EBApplicationVersion" : {
      "Type" : "AWS::ElasticBeanstalk::ApplicationVersion",
      "Properties" : {
        "Description" : "Version 5.0.0",
        "ApplicationName" : { "Ref" : "EBApplication" },
        "SourceBundle" : {
          "S3Bucket" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "RegionBucket"]},
          "S3Key" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "ApplicationSource"]}
        }
      }
    },

    "EBEnvironment" : {
     "Type" : "AWS::ElasticBeanstalk::Environment",
     "DependsOn" : ["CertWriterInstance", "DNSEFS", "DNSRedis"],
     "Properties" : {
       "ApplicationName" : { "Ref" : "EBApplication" },
        "Description" :  "OpenEMR v5.0.0 cloud deployment",
        "SolutionStackName" : "64bit Amazon Linux 2017.03 v2.4.3 running PHP 7.0",
        "VersionLabel" : { "Ref" : "EBApplicationVersion" },
        "OptionSettings" : [
          {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "SecurityGroups", "Value" : { "Ref" : "ApplicationSecurityGroup" }},
          {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "EC2KeyName", "Value" : { "Ref" : "EC2KeyPair" }},
          {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "IamInstanceProfile", "Value" :  {"Fn::GetAtt" : ["BeanstalkInstanceProfile", "Arn"] } },
          {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "InstanceType", "Value" : "t2.micro" },
          {"Namespace" : "aws:elb:listener", "OptionName" : "InstanceProtocol", "Value" : "HTTPS"},
          {"Namespace" : "aws:elb:listener", "OptionName" : "InstancePort", "Value" : "443"},
          {"Namespace" : "aws:elb:policies", "OptionName" : "ConnectionDrainingEnabled", "Value" : "true"},
          {"Namespace" : "aws:elb:policies", "OptionName" : "ConnectionSettingIdleTimeout", "Value" : "3600"},
          {"Namespace" : "aws:elb:policies:backendencryption", "OptionName" : "PublicKeyPolicyNames", "Value" : "backendkey"},
          {"Namespace" : "aws:elb:policies:backendencryption", "OptionName" : "InstancePorts", "Value" : "443"},
          {"Namespace" : "aws:elb:policies:backendkey", "OptionName" : "PublicKey", "Value" : { "Fn::GetAtt" : ["EBCert", "PublicKey"] }},
          {"Namespace" : "aws:ec2:vpc", "OptionName" : "VPCId", "Value" : { "Ref" : "VPC" }},
          {"Namespace" : "aws:ec2:vpc", "OptionName" : "Subnets", "Value" :
            { "Fn::Join" : [ ",", [ {"Ref": "SubnetPrivate1"}, {"Ref": "SubnetPrivate2"} ] ] }
          },
          {"Namespace" : "aws:ec2:vpc", "OptionName" : "ELBSubnets", "Value" :
            { "Fn::Join" : [ ",", [ {"Ref": "SubnetPublic1"}, {"Ref": "SubnetPublic2"} ] ] }
          },
          {"Namespace" : "aws:elasticbeanstalk:application", "OptionName": "Application Healthcheck URL", "Value": "HTTPS:443/openemr/version.php"},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "TIMEZONE", "Value": {"Ref" : "TimeZone"}},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "REDIS_IP", "Value": "redis.openemr.local"},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "FILE_SYSTEM_ID", "Value": {"Ref" : "ElasticFileSystem"}},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "NFS_HOSTNAME", "Value": "nfs.openemr.local"},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "S3BUCKET", "Value": {"Ref" : "S3Bucket"}},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "KMSKEY", "Value": {"Ref" : "OpenEMRKey"}}
       ]
     }
   }


},

  "Outputs" : {
    "OpenEMR" : {
      "Description" : "OpenEMR Setup",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : ["EBEnvironment", "EndpointURL"] }, "/openemr"]]}
    }
  }
}
